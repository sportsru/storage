// Generated by CoffeeScript 1.3.3
var Storage, app, uncache;

app = require('./app');

uncache = require('./uncache');

Storage = require('./models/storage');

app.get('/:uid/version/', function(req, res) {
  return Storage.findOne({
    uid: req.params.uid
  }, function(err, doc) {
    if ((err != null) || !(doc != null)) {
      return res.send(404);
    } else {
      return res.json({
        version: doc.version
      });
    }
  });
});

app.post('/:uid/set/', function(req, res) {
  if (Object.keys(req.body).length !== 0) {
    return Storage.findOne({
      uid: req.params.uid
    }, function(err, doc) {
      var key, val, _ref;
      if (err != null) {
        return res.send(503);
      } else {
        if (!(doc != null)) {
          doc = new Storage({
            uid: req.params.uid,
            data: req.body
          });
          return doc.save(function() {
            return uncache(req.params.uid, 0, function(status) {
              return res.send(status);
            });
          });
        } else {
          _ref = req.body;
          for (key in _ref) {
            val = _ref[key];
            doc.data[key] = val;
          }
          return Storage.update({
            _id: doc._id
          }, {
            $inc: {
              version: 1
            },
            $set: {
              data: doc.data
            }
          }, function() {
            return uncache(req.params.uid, doc.version + 1, function(status) {
              return res.send(status);
            });
          });
        }
      }
    });
  } else {
    return res.send(200);
  }
});

app.get('/:uid/data/', function(req, res) {
  return Storage.findOne({
    uid: req.params.uid
  }, function(err, doc) {
    return res.json(doc != null ? doc.data : {});
  });
});
