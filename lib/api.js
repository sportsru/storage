// Generated by CoffeeScript 1.3.3
var Storage, app, uncache;

uncache = require('./uncache');

app = require('./app');

Storage = require('./models/storage');

app.get('/version/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    var vers;
    if (err != null) {
      return res.send(503);
    } else {
      vers = doc != null ? doc.version : -1;
      uncache(req.uid, vers, function() {
        return void 0;
      });
      return res.json({
        version: vers
      });
    }
  });
});

app.get('/data/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    if (err != null) {
      return res.send(503);
    } else {
      if (req.query.counter != null) {
        return res.json(doc != null ? doc.tags : {});
      } else {
        return res.json(doc != null ? doc.data : {});
      }
    }
  });
});

app.post('/set/', function(req, res) {
  var fields, key, val, _ref;
  fields = {};
  _ref = req.body;
  for (key in _ref) {
    val = _ref[key];
    fields['data.' + key] = val;
  }
  return Storage.findAndModify({
    uid: req.uid
  }, {
    $inc: {
      version: 1
    },
    $set: fields
  }, {
    upsert: true
  }, function(error, doc) {
    if (error != null) {
      return res.send(503);
    } else {
      return uncache(req.uid, doc.version + 1, function(status) {
        return res.send(status);
      });
    }
  });
});

app.get('/setcounter/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    var key, last_visit, tags, tg, _i, _j, _len, _len1;
    if ((err != null) || !(req.query.tg != null)) {
      return res.send(503);
    } else {
      tg = req.query.tg.split('.');
      if (!(tg.length === 1 && tg[0] === '')) {
        tags = {};
        last_visit = Math.floor(new Date() / 1000);
        if (doc == null) {
          for (_i = 0, _len = tg.length; _i < _len; _i++) {
            key = tg[_i];
            tags[key] = 1;
          }
          doc = new Storage({
            _id: req.uid,
            uid: req.uid,
            tags: tags,
            last_visit: last_visit
          });
          return doc.save(function() {
            return uncache(req.uid, 0, function(status) {
              return res.send(status);
            });
          });
        } else {
          for (_j = 0, _len1 = tg.length; _j < _len1; _j++) {
            key = tg[_j];
            tags['tags.' + key] = 1;
          }
          return Storage.update({
            _id: doc._id
          }, {
            $inc: tags,
            $set: {
              last_visit: last_visit
            }
          }, function() {
            return uncache(req.uid, doc.version, function(status) {
              return res.send(status);
            });
          });
        }
      } else {
        return res.send(200);
      }
    }
  });
});
