// Generated by CoffeeScript 1.3.3
var Statistic, Storage, app, counter, start, timer, uncache;

uncache = require('./uncache');

app = require('./app');

Storage = require('./models/storage');

Statistic = require('./models/stat');

start = new Date().getTime();

counter = 0;

timer = null;

timer = setInterval(function() {
  (new Statistic({
    counter: counter,
    time: start
  })).save();
  counter = 0;
  return start = new Date().getTime();
}, 60 * 1000);

app.get('/version/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    var vers;
    if (err != null) {
      return res.send(503);
    } else {
      vers = doc != null ? doc.version : -1;
      uncache(req.uid, vers, function() {
        return void 0;
      });
      return res.json({
        version: vers
      });
    }
  });
});

app.get('/data/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    if (err != null) {
      return res.send(503);
    } else {
      if (req.query.counter != null) {
        return res.json(doc != null ? doc.tags : {});
      } else {
        return res.json(doc != null ? doc.data : {});
      }
    }
  });
});

app.post('/set/', function(req, res) {
  var fields, key, val, _ref;
  counter++;
  fields = {};
  _ref = req.body;
  for (key in _ref) {
    val = _ref[key];
    fields['data.' + key] = val;
  }
  return Storage.findOneAndUpdate({
    uid: req.uid
  }, {
    $inc: {
      version: 1
    },
    $set: fields
  }, {
    upsert: true
  }, function(error, doc) {
    if (error != null) {
      return res.send(503);
    } else {
      return uncache(req.uid, doc.version + 1, function(status) {
        return res.send(status);
      });
    }
  });
});

app.get('/setcounter/', function(req, res) {
  var key, tags, tg, _i, _len;
  counter++;
  tg = req.query.tg.split('.');
  if (!(tg.length === 1 && tg[0] === '')) {
    tags = {};
    for (_i = 0, _len = tg.length; _i < _len; _i++) {
      key = tg[_i];
      tags['tags.' + key] = 1;
    }
    return Storage.update({
      uid: req.uid
    }, {
      $inc: tags,
      $set: {
        last_visit: Math.floor(new Date() / 1000)
      }
    }, function(error) {
      if (error != null) {
        return res.send(503);
      } else {
        return res.send(200);
      }
    });
  }
});
