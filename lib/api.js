// Generated by CoffeeScript 1.4.0
var Storage, app, uncache;

uncache = require('./uncache');

app = require('./app');

Storage = require('./models/storage');

app.get('/version/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    var vers;
    if (err != null) {
      return res.send(503);
    } else {
      vers = doc != null ? doc.version : -1;
      uncache(req.uid, vers, function() {
        return void 0;
      });
      return res.json({
        version: vers
      });
    }
  });
});

app.post('/set/', function(req, res) {
  if (Object.keys(req.body).length !== 0) {
    return Storage.findOne({
      uid: req.uid
    }, function(err, doc) {
      var key, val, _ref;
      if (err != null) {
        return res.send(503);
      } else {
        if (doc == null) {
          doc = new Storage({
            uid: req.uid,
            data: req.body
          });
          return doc.save(function() {
            return uncache(req.uid, 0, function(status) {
              return res.send(status);
            });
          });
        } else {
          _ref = req.body;
          for (key in _ref) {
            val = _ref[key];
            doc.data[key] = val;
          }
          return Storage.update({
            _id: doc._id,
            $inc: {
              version: 1
            },
            $set: {
              data: doc.data
            }
          }, function() {
            return uncache(req.uid, doc.version + 1, function(status) {
              return res.send(status);
            });
          });
        }
      }
    });
  } else {
    return res.send(200);
  }
});

app.get('/setcounter/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    var key, tags, tg, _i, _j, _len, _len1;
    if (err != null) {
      return res.send(503);
    } else {
      tg = req.query.tg.split('.');
      tags = {};
      if (!(doc != null)) {
        for (_i = 0, _len = tg.length; _i < _len; _i++) {
          key = tg[_i];
          tags[key] = 1;
        }
        doc = new Storage({
          uid: req.uid,
          tags: tags
        });
        return doc.save(function() {
          return uncache(req.uid, 0, function(status) {
            return res.send(status);
          });
        });
      } else {
        for (_j = 0, _len1 = tg.length; _j < _len1; _j++) {
          key = tg[_j];
          tags['tags.' + key] = 1;
        }
        return Storage.update({
          _id: doc._id
        }, {
          $inc: tags
        }, function() {
          return uncache(req.uid, doc.version, function(status) {
            return res.send(status);
          });
        });
      }
    }
  });
});

app.get('/data/', function(req, res) {
  return Storage.findOne({
    uid: req.uid
  }, function(err, doc) {
    if (err != null) {
      return res.send(503);
    } else {
      return res.json(doc != null ? doc.data : {});
    }
  });
});
